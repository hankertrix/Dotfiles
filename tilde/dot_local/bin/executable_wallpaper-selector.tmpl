#!/bin/sh

# Help text
HELP_TEXT='
A script to easily select a wallpaper based on the theme.
It makes use of waypaper and darkman to do the heavy lifting.

Options:
  -h, --help
	Show this help message and exit.

  -r, --random
	Select a random wallpaper.

  -l, --light
	Select a light wallpaper, mutually exclusive with the -d, --dark flag.

  -d, --dark
	Select a dark wallpaper, mutually exclusive with the -l, --light flag.
'

# Function to warn the user about having no arguments for an option
warn_no_arguments() {
	printf 'Warning: No argument given for "%s" option\n' "$1" >&2
	printf 'Warning: Ignoring "%s" option\n' "$1" >&2
}

# Reset all variables that might be set
random=
theme=
wait_time=
palette=

# Parse the arguments given
while :; do
	case $1 in

	# If the argument is for the help command, show the help and exit
	-h | -\? | --help)
		echo "$HELP_TEXT"
		exit
		;;

	# If the random flag is passed, set the random variable to true
	-r | --random)
		random=true
		;;

	# If the light flag is passed,
	# set the theme to light if it is not already set
	-l | --light)
		if [ -z "$theme" ]; then
			theme="light"
		fi
		;;

	# If the dark flag is passed,
	# set the theme to dark if it is not already set
	-d | --dark)
		if [ -z "$theme" ]; then
			theme="dark"
		fi
		;;

	# If the wait option is passed
	-w | --wait)

		# If the next argument is given
		if [ -n "$2" ]; then

			# Set the wait time to the next argument
			wait_time="$2"

			# Shift the arguments over by 1 to skip the argument
			shift

		# Otherwise, warn the user that there are no arguments
		else
			warn_no_arguments "$1"
		fi
		;;

	# If the wait option is given with an equal sign (=)
	--wait=?*)

		# Delete everything up to "=" and assign what is left
		wait_time="${1#*=}"
		;;

	# Handle the case of an empty "--wait=" by warning the user
	--wait=)
		warn_no_arguments "$1"
		;;

	# End of all options, stop parsing
	--)
		shift
		break
		;;

	# Unknown option
	-?*)
		printf 'Warning: Unknown option "%s" ignored\n' "$1" >&2
		;;

	# Default case
	*)
		break
		;;
	esac

	# Go to the next argument
	shift
done

# If the theme hasn't been set, get the theme from darkman
if [ -z $theme ]; then
	theme=$(darkman get)
fi

# Get the palette
palette=$(printf "%s16" "$theme")

# Set the wallpaper directory
wallpaper_base_directory='{{ joinPath .chezmoi.workingTree "wallpapers" }}'
wallpaper_directory="$wallpaper_base_directory/$theme/"

# Function to select a wallpaper
select_wallpaper() {

	# If the random flag is given
	if [ "$random" = true ]; then

		# Select a random wallpaper from the wallpaper directory
		wallpaper_path=$(fd . "$wallpaper_directory" \
			-e jpg -e jpeg -e png --type f |
			shuf -n 1)

	# Otherwise
	else

		# Open the wallpaper picker to select a wallpaper
		wallpaper_path=$(rofi \
			-modes filebrowser \
			-theme wallpaper \
			-show filebrowser \
			-filebrowser-directory "$wallpaper_directory" \
			-filebrowser-command 'echo' \
			-selected-row 1)
	fi
}

# Function to set the wallpaper
set_wallpaper() {

	# If the wallpaper path is empty, exit the script
	if [ -z "$wallpaper_path" ]; then
		exit
	fi

	# Call the wallpaper program to set the wallpaper
	swww img \
		--filter Lanczos3 \
		--resize crop \
		--transition-type any \
		--transition-step 90 \
		--transition-duration 2 \
		--transition-angle 45 \
		--transition-fps 240 \
		"$wallpaper_path"
}

# Function to theme applications
theme_and_reload_applications() {

	# Generate the colours from the wallpaper passed as the first argument
	# and skip setting the terminal theme
	wallust run "$wallpaper_path" --palette "$palette" --skip-sequences

	# Wait for the wait time given before reloading the applications
	if [ -n "$wait_time" ]; then
		sleep "$wait_time"
	fi

	# Reload waybar
	killall -SIGUSR2 waybar

	# Restart dunst
	systemctl --user restart dunst

	# Update pywalfox
	pywalfox update

	# Kill nautilus
	killall nautilus
}

# The main function to run to set the wallpaper and theme everything
main() {

	# Select a wallpaper
	select_wallpaper

	# Set the wallpaper
	set_wallpaper

	# Theme and reload applications
	theme_and_reload_applications
}

# Call the main function
main

# vi: ft=sh tabstop=4 shiftwidth=4
